# HE CENTRAL CONTROL
# VERSIO 0.1

esphome:
  name: he-central-control
  friendly_name: HE Central Control

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "MKvRRKoj2YtE/WieToKFo2jxp0ICOCdXSX1yNJqlgok="

ota:
  - platform: esphome
    password: "64be8379ae805d4498c13f1453f129ed"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "He-Central-Control"
    password: "aTdyXARdQz5u"

captive_portal:

#MAX31865 Control de temperatura Ximeneia
# Example configuration entry
spi:
  miso_pin: 22
  mosi_pin: 21
  clk_pin: 23

sensor:
  - platform: max31865
    name: "Temp ximeneia"
    cs_pin: 19
    reference_resistance: 430 Ω
    rtd_nominal_resistance: 100 Ω

# Sonda temperatura caldera
# Bus lectura sensors Dallas
one_wire:
  - platform: gpio
    pin: GPIO20
    id: bus_sensor_temp

# Basat en Dallas DS18B20 
sensor:
  - platform: dallas_temp
    one_wire_id: bus_sensor_temp
    address: 0x1234567812345628
    name: "Temp Caldera"
    id: TC
    update_interval: 30s
    # Optional variables:
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
    on_value_range:
    # Aigua poc calenta per engegar bombes
     - below: 50 
       then:
        - switch.turn_off: rele_BP # Apaguem la bomba primaria
        - switch.turn_off: rele_BS # Apagauem la bomba secundaria
        - switch.turn_off: alarma_sonora # Apaguem sonar alarma
    # Aigua calenta per engegar bomba primaria 
     - above: 50 
       below: 55
       then:
        - switch.turn_on: rele_BP # Engeguem la bomba primaria
        - switch.turn_off: rele_BS # Apaguem la bomba secundaria
        - switch.turn_off: alarma_sonora # Apaguem sonar alarma
    # Aigua calenta en funcionament normal
     - above: 55 
       below: 90 
        - switch.turn_on: rele_BP # Engeguem la bomba primaria
        - switch.turn_on: rele_BS # Apaguem la bomba secundaria
        - switch.turn_off: alarma_sonora # Apaguem sonar alarma
    # Aigua massa calenta reduim admissió aire    
     - above: 90
       below: 95
       then:
         - servo.write:
           id: control_aire 
           level: !lambda 'return (id(TC).state)-90)*20;'# Tanca progresivament l'admisió de l'aire 90-> obert 95-> tancat
        - switch.turn_off: alarma_sonora # Apaguem sonar alarma
    # Aigua massa calenta tanquem admissió aire i fem sonar alarma
     - above: 95.0
       then:
         - servo.write:
           id: control_aire 
           level: 100% # Tanca l'admisió secundaria d'aire
         - switch.turn_on: alarma_sonora # Fem sonar alarma

# Sensor pressió 
# 0 - 0,5MPa  --> 0,5V - 4,5V (cal alimentar a 5V)
# Cal posar un divisor de tensió de 220ohms i 1K per ajustar la sortida al maxim 3,3V al llegir 4bar
  - platform: adc
    pin: GPIO35
    name: 'Pressió'
    attenuation: 12db
    device_class: "pressure"
    state_class: "measurement" #Perque mantingui les dades
    accurancy_decimals: 2
    unit_of_measurement: "bar"
    filters:
      - calibrate_linear: 
        0,375 -> 0
        2,18 -> 3
        3,38 -> 5
      clamp:
        min_value: 0
    on_vaue_range:
      - below: 2.8 # Si la pressió passa de 2.8
        then:
          - switch.turn_on: alarma_sonora # Fem sonar alarma

    # Cal fer un sensor binari intern per saber si cal activar o no alarma, pq no engegui per pressió i tanqui per temp normal o al reves.

# Servo control aire secundari
# Cal analitzar si es funcional

servo:
  - id: control_aire
    output: pwm_output

# On ESP32, use ledc output
output:
  - platform: ledc
    id: pwm_output
    pin: GPIO13
    frequency: 50 Hz

switch:
  - platform: gpio
    pin: GPIO18
    id: rele_BP # Rele bomba primaria

  - platform: gpio
    pin: GPIO19
    id: rele_BS # Rele bomba secundaria

  - platform: gpio
    pin: GPIO20
    id: alarma_sonora # Rele o alarma sonora per indicar emergencia
